package com.apartment.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.DigestUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.apartment.bean.LoginUser;
import com.apartment.service.LoginUserService;
import com.apartment.service.impl.TokenService;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.auth0.jwt.exceptions.JWTVerificationException;

@RestController
@RequestMapping("/user")
public class LoginUserController {
	@Autowired
	private LoginUserService loginUserService;
	@Autowired
	private TokenService tokenService;
	
	@RequestMapping(value = "/getUserByName", method = RequestMethod.GET)
	public LoginUser getUserByName(String username) {
		return loginUserService.getUserByName(username);
	}
	
	/**
	 * Login method
	 * @param loginUser
	 * @param request
	 * @return
	 */
	@RequestMapping("/login")
	public String login(@RequestBody LoginUser loginUser, HttpServletRequest request) {
		String encodedPassword = DigestUtils.md5DigestAsHex(loginUser.getPassword().getBytes());
		loginUser.setPassword(encodedPassword);
		LoginUser userForBase = loginUserService.getUserAuth(loginUser);
		
		if (userForBase == null) {
			String msg = "Invalid Username or Password";
			return msg;
		}
		String token = tokenService.getToken(userForBase);
		return token;
	}
	
	@RequestMapping("/info")
	public Map<String, String> getMessage(String token) {
		System.out.println("GetMessage: token = " + token);
		Map<String, String> map = new HashMap<>();
		if (token == null) {
			map.put("code", "20001");
			map.put("message", "No token, please login again");
			return map;
		}
		//	获取token中的username
		String username = "";
		try {
			username = JWT.decode(token).getAudience().get(0);
		} catch (JWTDecodeException e) {
			map.put("code", "40001");
			map.put("message", "Get username Error");
			return map;
		}
		
		LoginUser loginUser = loginUserService.getUserByName(username);
		if (loginUser == null) {
			map.put("code", "40002");
			map.put("message", "User is not exist, please login again");
			return map;
		}
		
		//	验证token
		JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(loginUser.getPassword())).build();
		try {
			jwtVerifier.verify(token);
		} catch (JWTVerificationException e) {
			map.put("code", "40003");
			map.put("message", "Verify token fail");
			return map;
		}		
		
		map.put("code", "20000");
		map.put("message", "Login Success!");
		map.put("name", loginUser.getUsername());
		map.put("avatar", "https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif");
		return map;
	}
	
	@RequestMapping("/logout")
	public String logout(HttpServletRequest request) {
		return "Logout success";
	}
}
